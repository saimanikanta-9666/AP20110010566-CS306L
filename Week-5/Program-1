Implement Recursive Descent Parser for the Expression Grammar given below.

E → TE’
E’→ +TE’ | ͼ
T → FT’
T’→ *FT’ | ͼ
F → (E) | i


CODE:

#include<stdio.h>
#include<string.h>
int E(),Edash(),T(),Tdash(),F();
char *ip;
char string[50];
int main()
{
 printf("Enter the string:");
 scanf("%s",string);
 ip=string;
 printf("\n\nInput\t\tAction\n--------------------------------\n");
 if(E() && *ip=='\0'){
 printf("\n--------------------------------\n");
 printf("\n String is successfully parsed\n");
 }
 else{
 printf("\n--------------------------------\n");
 printf("Error in parsing String\n");
 }
}
int E()
{
 printf("%s\t\tE->TE' \n",ip);
 if(T())
 {
 if(Edash())
 {
 return 1;
 }
 else
 return 0;
 }
 else
 return 0;
}
int Edash()
{
 if(*ip=='+')
 {
 printf("%s\t\tE'->+TE' \n",ip);
 ip++;
 if(T())
 {
 if(Edash())
 {
 return 1;
 }
 else
 return 0;
 }
 else
 return 0;
 }
 else
 {
 printf("%s\t\tE'->^ \n",ip);
 return 1;
 }
}
int T()
{
 printf("%s\t\tT->FT' \n",ip);
 if(F())
 {
 if(Tdash())
 {
 return 1;
 }
 else
 return 0;
 }
 else
 return 0;
}
int Tdash()
{
 if(*ip=='*')
 {
 printf("%s\t\tT'->*FT' \n",ip);
 ip++;
 if(F())
 {
 if(Tdash())
 {
 return 1;
 }
 else
 return 0;
 }
 else
 return 0;
 }
 else
 {
 printf("%s\t\tT'->^ \n",ip);
 return 1;
 }
}
int F()
{
 if(*ip=='(')
 {
 printf("%s\t\ttF->(E) \n",ip);
 ip++;
 if(E())
 {
 if(*ip==')')
 {
 ip++;
 return 1;
 }
 else
 return 0;
 }
 else
 return 0;
 }
 else if(*ip=='i')
 {
 ip++;
 printf("%s\t\tF->id \n",ip);
 return 1;
 }
 else
 return 0;
}


OUTPUT:

Enter the string:i*i+i*i+i


Input		Action
--------------------------------
i*i+i*i+i		E->TE' 
i*i+i*i+i		T->FT' 
*i+i*i+i		F->id 
*i+i*i+i		T'->*FT' 
+i*i+i		F->id 
+i*i+i		T'->^ 
+i*i+i		E'->+TE' 
i*i+i		T->FT' 
*i+i		F->id 
*i+i		T'->*FT' 
+i		F->id 
+i		T'->^ 
+i		E'->+TE' 
i		T->FT' 
		F->id 
		T'->^ 
		E'->^ 

--------------------------------

 String is successfully parsed

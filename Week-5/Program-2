Construct Recursive Descent Parser for the grammar
G = ({S, L}, {(, ), a, ,}, {S → (L) | a ; L→ L, S | S}, S)
S->(L)|a
L->SLdash
Ldash->,SLdash| ͼ

CODE:

#include <stdio.h>
int S(),L(),Ldash();
char *ptr;
int main()
{
 
 char string[20];
 printf("Enter a string: ");
 scanf("%s",string);
 ptr=string;
 printf("\n\nInput\t\tAction\n--------------------------------\n");
 if(S() && *ptr=='\0'){
    printf("\n--------------------------------\n");
    printf("\nString is successfully parsed.\n");
 }
else
    printf("\nError in parsing string\n");
    return 0;
}
int S()
{
    if(*ptr=='(')
    { printf("%s\t\t S->(L)\n",ptr);
        ptr++;
        if(L())
          {
              if(*ptr==')')
              {  ptr++;
                 return 1;
              }
              else
                 return 0;
          }
        else
           return 0;
    }
    else
      { 
          printf("%s\t\t S->a\n",ptr);
          ptr++;
          return 1;
      }
}

int L()
{
    printf("%s\t\t L->SLdash\n",ptr);
    if(S())
    {
        if(Ldash())
           return 1;
        else 
           return 0;
    }
    else
       return 0;
}

int Ldash()
{
    
    if(*ptr==',')
    {
        printf("%s\t\tLdash->,SLdash\n",ptr);
        ptr++;
        if(S())
        {
            if(Ldash())
               return 1;
            else
               return 0;
        }
    }
    else
       {printf("%s\t\tLdash-> null\n",ptr);
         return 1;
       }
}



OUTPUT:

Enter a string: (a,((a,a),(a,a)))


Input		Action
--------------------------------
(a,((a,a),(a,a)))		 S->(L)
a,((a,a),(a,a)))		 L->SLdash
a,((a,a),(a,a)))		 S->a
,((a,a),(a,a)))		Ldash->,SLdash
((a,a),(a,a)))		 S->(L)
(a,a),(a,a)))		 L->SLdash
(a,a),(a,a)))		 S->(L)
a,a),(a,a)))		 L->SLdash
a,a),(a,a)))		 S->a
,a),(a,a)))		Ldash->,SLdash
a),(a,a)))		 S->a
),(a,a)))		Ldash-> null
,(a,a)))		Ldash->,SLdash
(a,a)))		 S->(L)
a,a)))		 L->SLdash
a,a)))		 S->a
,a)))		Ldash->,SLdash
a)))		 S->a
)))		Ldash-> null
))		Ldash-> null
)		Ldash-> null
String accepted.
--------------------------------







